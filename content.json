{"meta":{"title":"Merlin's Blog","subtitle":null,"description":"一个热爱 AI 的技术博客","author":"merlin","url":"http://merlin153.com","root":"/"},"pages":[],"posts":[{"title":"Pycharm个性设置","slug":"Pycharm个性设置","date":"2019-04-08T22:56:17.000Z","updated":"2019-04-08T15:13:28.363Z","comments":true,"path":"2019/04/09/Pycharm个性设置/","link":"","permalink":"http://merlin153.com/2019/04/09/Pycharm个性设置/","excerpt":"","text":"早期学语言的时候我一直都认为编辑器或者说IDE就是一种生产代码的软件，现在渐渐明白其实IDE也就是个能让你提高工作和管理的可视化软件，其本身对你工程并没有什么其他额外的作用。本质上，你所做的工程都是由一对对文件构成的，因为里面的调用关系才让软件看起来和“活”了一般。说了工程的本质，目的也是希望各路大神不要把IDE作为一种依赖工具，根据自己需求使用就好。所以在这里简单记录下编辑Python工程的IDE软件–Pycharm（目前还在使用中，后面会不断更新自定义的使用操作……）。 Pycharm是由Jetbrains开发的优秀的Python IDE。正如所有其它 JetBrains 集成开发环境一样，PyCharm 具有智能代码编辑器，能理解 Python 的特性并提供卓越的生产力推进工具：自动代码格式化、代码完成、重构、自动导入和一键代码导航等。这些功能在先进代码分析程序的支持下，使 PyCharm 成为 Python 专业开发人员和刚起步人员使用的有力工具。 配置编辑窗口配置代码颜色 方式一：如果不想自定义设置，可以参考这个链接，喜欢的话点击这里下载Jetbrains的全家桶包，里面有两个jar包，配置Pycharm就选在Pycharm的jar包，选全家桶的也没关系，因为是jar包，所以直接导入，操作是（file-&gt;import setting-&gt;color scheme font(或者python)，不满意可以微微修改。（不想麻烦也可以在百度网盘下载（链接: 链接：https://pan.baidu.com/s/14En5fMSs4O7Nd6_9U1vMKw提取码：obhr 复制这段内容后打开百度网盘手机App，操作更方便哦）） 方式二 可以去网上找一些Pycharm代码主题风格的配置文件(以 .icls格式结尾的)，也可以参考我这里(链接：https://pan.baidu.com/s/1llVOJdO3ta8C_jb5ANEhng提取码：0kaf 复制这段内容后打开百度网盘手机App，操作更方便哦)的，应用主题可以直接将主题复制到 C:\\Users\\Administrator.PyCharm2017.2\\config\\colors 这个目录下，或者也可以导入进来，参考下图： 配置代码背景颜色File -&gt; setting -&gt; Editor -&gt; Color Scheme -&gt; General -&gt; Text -&gt; Default text,然后自行选择颜色。 显示代码行号行号设置：File -&gt; setting -&gt; Editor -&gt; General -&gt; Appearance -&gt; show line numbers 设置字体属性File -&gt; setting -&gt; Editor -&gt; Color Scheme -&gt; Color Scheme Font,然后自行设置 如果还有喜欢的个性配置，还会继续更新。。。","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://merlin153.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://merlin153.com/tags/Python/"}],"author":"merlin"},{"title":"初学Python","slug":"初学Python","date":"2019-04-02T09:53:13.000Z","updated":"2019-04-02T01:55:36.785Z","comments":true,"path":"2019/04/02/初学Python/","link":"","permalink":"http://merlin153.com/2019/04/02/初学Python/","excerpt":"","text":"基础语法注释 设置编码默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串， 当然你也可以为源码文件指定不同的编码，如果你是Python 2，则需要添加如下代码以实现输出汉语1#encoding=utf-8 在这里说明，编码设置必须放置第一行，当python解释器读到是以上代码时，会自动识别该文件的汉语并做处理 单行注释Python中单行注释以 # 开头，后跟内容 多行注释多行注释可以用多个 # 号，也可以 ‘’’ 和 “””标识符 第一个字符必须是字母或者下划线_ 标识符的其他的部分由字母、数字和下划线组成 标识符对大小写敏感（意思是例如Test和test函数是两个不同的函数） 关键字（保留字）关键字不能把它们用作任何标识符名称，通过keyword.kwlist可查询首行缩进python能用首行缩进表示代码块，不恰当的缩进会导致程序错误。数据类型Python3 中有六个标准的数据类型：不可变数据类型：Number（数字）、String（字符串）、Tuple（元组）可变数据类型：List（列表）、Set（集合）、Dictionary（字典） 数据类型的判断可通过instance和type来判断，区别在于：type()不会认为子类是一种父类类型。isinstance()会认为子类是一种父类类型。 注意：在 Python3 中，True 和 False 被定义成关键字了，但它们的值还是 1 和 0，而且它们可以和数字相加。 可变类型 number类型int (整数)：如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。bool (布尔)： 如 True。float (浮点数)：如 1.23、3E-2complex (复数)： 如 1 + 2j、 1.1 + 2.2j 字符串（String） python中单引号和双引号使用完全相同 使用三引号(‘’’或”””)可以指定一个多行字符串。3.转义符 ‘\\‘4.反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \\n” 则\\n会显示，并不是换行。5.按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。6.字符串可以用 + 运算符连接在一起，用 * 运算符重复。7.Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。8.字符串的截取的语法格式：变量[头下标:尾下标:步长] 1234567891011121314151617181920212223242526def printExplain(): print(\"=\"*20)# 以下是测试内容print('你好')printExplain()print(\"你好\")printExplain()print(\"这句话含\\n有转义字符\")printExplain()print(r\"这句话加入了r\\n，使不发生转义\")printExplain()print(\"\"\"这是个多行字符\"\"\")printExplain()print(\"这段话通过\"+\"带+符号\"+\"实现\")print(\"这段话通过及联\"\"的方式实现\")printExplain()str=\"hello world\"strp=\"这是个字符串\"print(str[0:-1:2])print(strp[0:-1:2])printExplain() 运行结果为： 元组元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。注意：虽然tuple的元素不可改变，但==它可以包含可变的对象==，比如list列表。 列表列表是写在方括号 [] 之间、用逗号分隔开的元素列表。和字符串一样，列表同样可以被索引和截取，==列表被截取后返回一个包含所需元素的新列表== 字典字典是一种映射类型，它的元素是键值对。字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。键(key)必须使用不可变类型，在同一个字典中，键(key)必须是唯一的。==和列表的区别==：列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 Set集合集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员，主要是为了进行成员关系测试和删除重复元素，可以使用大括号 { } 或者 set() 函数创建集合。注意：：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。set集合在输出时会把重复元素弃掉，Set 集合可以进行计算：print(a - b) # a 和 b 的差集print(a | b) # a 和 b 的并集print(a &amp; b) # a 和 b 的交集print(a ^ b) # a 和 b 中不同时存在的元素 用户输入(input)1input(&quot;please input:&quot;) 输出格式化输出：12print(&quot;姓名：%s&quot;%name)print(&quot;姓名：%s,专业：%s&quot;%(name,mejor)) print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=”” import和from import在 python 用 import 或者 from…import 来导入相应的模块。 将整个模块(somemodule)导入，格式为： import somemodule从某个模块中导入某个函数,格式为： from somemodule import somefunction从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc将某个模块中的全部函数导入，格式为： from somemodule import *","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://merlin153.com/categories/Python学习/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://merlin153.com/tags/Python/"}],"author":"merlin"},{"title":"Markdown 语法","slug":"markdown语法","date":"2019-03-26T17:04:05.000Z","updated":"2019-04-02T15:01:07.432Z","comments":true,"path":"2019/03/27/markdown语法/","link":"","permalink":"http://merlin153.com/2019/03/27/markdown语法/","excerpt":"","text":"目录1234* 总目录 * 一级目录 * 二级目录 * 三级目录 说明：层级列表一般只支持三级列表，第一级实心圆点，第二级空心圆点，第三级以后都是实心方点。要实现层级列表，每下一级都要比上一级多输入2个空格或者一个Tab，而且第一级前面不要超过3个空格.效果图： 标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 样式如下：效果图： 字体格式1234*斜体方式1* 或 _斜体方式2_ **粗体** ***加粗斜体*** ~~删除线~~ 效果图: 锚点网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中内容的跳转。比如我们经常读的论文或者PDF，里面就包含着丰富的锚点，其中的目录就是锚点，点击一个章节就能快跳到对应文本内容，以此实现文章内部内容的跳跃。12345678910* [目录1](#40) * [标题1](#41) * [标题2](#42) * [标题3](#43)&lt;h3 id=\"41\"&gt;标题1&lt;/h3&gt; 我是标题1的内容&lt;h3 id=\"42\"&gt;标题2&lt;/h3&gt; 我是标题2的内容&lt;h3 id=\"43\"&gt;标题3&lt;/h3&gt; 我是标题3的内容 效果图： 超链接 行内式（用的较多）：1欢迎来到[google](www.google.com) 语法：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接地址与链接标题前有一个空格。 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。1&lt;http://www.merlin153.com/&gt; 效果：http://www.merlin153.com/ 列表 常用列表123456789101112# 有序列表，使用数字、英文句点即可1. 有序列表一2. 有序列表二3. 有序列表三# 无序列表，使用 - ，+ ， * 都可表示无序列表 - 无序列表一+ 无序列表二- 无序列表三# 任务列表，要创建任务列表，前缀列表项[ ]。要将任务标记为完整，请使用[x]- [x] 文本一- [ ] 文本二- [ ] 文本三 效果图： 定义型列表12345名词1: 定义 1（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 效果图： 列表缩进列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。12* 这是第一段，当文章很长的时候才能看出来他的缩进效果，其实这种缩进看起来更像是一种无序列表，所以就当无序列表使用吧！* 这是第二段，当文章很长的时候才能看出来他的缩进效果，其实这种缩进看起来更像是一种无序列表，所以就当无序列表使用吧！ 效果图： 图片图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。（注：图片链接可通过图床获取，比较好用的图床有SM.MS, 七牛图床等等） 行内式（常用） 1[图片上传失败...(image-ebedc-1553931814787)] 参考式 12在文档要插入图片的地方写![图片名称][标记]在文档的最后写上[标记]:图片地址 “Title” 图片的效果就没必要演示了，正确的语法就能实现。 引用只需在前面加上 &gt; 符号即可实现，引用也可以嵌套123&gt; 这是引用&gt;&gt; 这是引用嵌套&gt;&gt;&gt;多层嵌套 效果图： 代码段通过三个 · 或者 ~ 实现，也可以实现包裹代码，在第一个 ~~~ 的后面紧跟语言名称可实现智能识别，以便实现代码高亮风格。1234```~~~pythonprint(&quot;hello world&quot;)~~~ 效果：1print(\"hello world\") 表格123|name|age||:-|-:||内容|意义。。| 表格第一栏填写名称，第二栏可以在两个 | 之间添加 - 实现表格，再在 - 左右两边添加 : 实现内容向左右边靠。效果图：| name | age || :— | ——-: || 内容 | 意义。。 || 内容 | 意义。。 | 脚注在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。效果：比如点击这里^[1]，会跳转到底部 流程图Markdown也可以实现流程图绘制，更多语法参考：流程图语法参考 LaTeX 公式抱歉很少用到，可能论文上用的多吧，如果需要可以参考There { 基础语法感觉就够用了，流程图截图就好了，后续更新中。。。 } 参考文章:^[1]:Demi的技术空间^[3]:Coding下的markdown语法^[4]:文图详解请参考这里","categories":[{"name":"markdown语法","slug":"markdown语法","permalink":"http://merlin153.com/categories/markdown语法/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://merlin153.com/tags/markdown/"},{"name":"博客","slug":"博客","permalink":"http://merlin153.com/tags/博客/"}],"author":"merlin"},{"title":"博客搭建记录","slug":"博客搭建记录","date":"2019-03-26T17:04:05.000Z","updated":"2019-04-01T16:07:03.740Z","comments":true,"path":"2019/03/27/博客搭建记录/","link":"","permalink":"http://merlin153.com/2019/03/27/博客搭建记录/","excerpt":"","text":"此文是对基于windows的博客搭建流程的描述,采用的是hexo+GithubPages+域名的实现方案。 原理属性介绍 GithubPages是Github提供的一种空间托管服务，但是只能托管静态文件，对于写博客足以，静态文件支持html、css这些常见的网页件，Markdown文件、Jekyll文件，并不支持PHP这种动态脚本. 补充：GitHubPages为了提供对HTML内容的支持，选择了Jekyll作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看Jekyll官方文档Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过layout将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。jekyll的大致目录如下： 使用hexo做静态博客有个比较麻烦的地方是，hexo本身的博客源码是基于node.js的，直接将源码放在github上是不能解析的，必须用命令 hexo generate(也可以简写：hexo g) 生成public文件，public文件里面是html、css文件，然后将其部署到github的username.github.io项目的master分支下，同时在source目录下添加CNAME文件（CNAME里面记录自定义的域名），这样hexo会把CNAME文件放到网站根目录下。 大致原理这里简单地解析下GithubPages的基本原理，以我的域名merlin153.com为例，这是我在Chrome浏览器里输入merlin153.com的时候，通过F12观察到的请求头header，注意在header里面有一个字段host，Github服务器正是通过host来判断应该向浏览器返回一个什么样的html页面。当然前提是我得把merlin.com这个域名的A记录指向github提供的服务器地址。github知道请求是要获取merlin153.com的首页，但是应该去哪个repository里面找呢？github服务器肯定有数据库存储了merlin153.com和repository的对应关系，这个对应关系肯定是添加CNAME文件的时候建立的,也就是通过CNAME触发这种关系。 搭建环境git的配置 小白安装极力推荐:windows下Git图形安装 第三方网站参考Runoob，我觉得这上面讲的也很细，关键有些小窍门，可以在这个网站对Git做更深入的了解。 查看官网安装Git官网安装Git安装完成后可以检查下是否安装成功： 通过右键直接查看，如果存在“git bash here”操作键则证明安装成功。 通过在DOS窗口的“git –version”指令查询Git版本nodejs的配置 小白安装请参考windows下nodejs图形安装 nodejs的安装可查看Runoob安装完成后一定要配置其全局变量，然后就可以通过查询其版本(node -v)以检查是否安装成功了。 域名 如果不想花钱购买域名也可以实现创建自己的网站，即采用“hexo+GithubPages”方式，用“username.github.io”的方式登录。但如果用自己喜欢的域名来登录，那将再好不过。购买域名的网站有很多，比较能够信任的有godaddy、namesilo、万网、aliyun、腾讯云等等，看自己意愿了。很多的国外域名购买时都会优惠一点，比我在namesilo购买域名时就优惠了1美元，在这里给大家分享个可以获得优惠码的网址：https://xianhuo.org/ 接下来就是解析域名了，解析就是域名到IP地址的转换过程。 在域名注册商那里注册了域名之后如何才能看到自己的网站内容呢，这就需要用一个专业术语叫“域名解析”的服务来为我们工作。 域名是为了方便记忆而专门建立的一套地址转换系统，要访问一台互联网上的服务器，最终还必须通过IP地址来实现，域名解析就是将域名重新转换为IP地址的过程。一个域名对应一个IP地址，一个IP地址可以对应多个域名；所以多个域名可以同时被解析到一个IP地址。域名解析需要由专门的域名解析服务器(DNS)来完成。 解析过程。比如，一个域名为：aaa.com，如果要访问该网站，就要进行解析，首先在域名注册商如阳光互联等那里通过专门的DNS服务器解析到一个WEB服务器的一个固定IP上：211.214.1.XXX，然后，通过WEB服务器来接收这个域名，把aaa.com这个域名映射到这台服务器上。那么，输入aaa.com这个域名就可以实现访问网站内容了.即实现了域名解析的全过程. 人们习惯记忆域名，但机器间互相只认IP地址，域名与IP地址之间是对应的，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，整个过程是自动进行的。 域名解析协议（DNS）用来把便于人们记忆的主机域名和电子邮件地址映射为计算机易于识别的IP地址。DNS是一种c/s的结构，客户机就是用户用于查找一个名字对应的地址，而服务器通常用于为别人提供查询服务 如何实现在注册商那里管理域名，需要添加两条记录，即：A记录和CNAME记录。同时你的博客站点目录的source文件夹下必须创建创建一个名字CNAME的文件，里面只需要记录你的域名。 A记录(IP指向)：用来指定域名对应的IP地址记录。用户可以将该域名解析到自己的WEB SERVER上。同时也可以设置您域名的二级域名。 CNAME（别名指向）:用域名来代替IP地址。 图形操作可参考此作者 配置hexoHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 在磁盘中新建一个文件夹blog，进入blog，右键‘git bash here’，执行命令安装hexo：npm install -g hexo 初始化hexohexo init 安装npm和hexonpm install 启动本地浏览hexo s即可看到本地预览界面，也就是hexo的默认主题界面，后面我们进行替换主题操作。 常用命令hexo clean –&gt;hexo generate –&gt;hexo deploy 使用个性主题&lt;= 待修改… =&gt;这里我推荐一些比较受宠的主题，有yilia，next，jekll等等，这些主题可以到hexo【主题】栏里搜索到，大家也可以在hexo主题里看到很多其他的主题,如果喜欢的话可以点进相关主题，然后进入他们的github进行clone即可。这里，我比较喜欢基于next主题的响应式主题–miho，因为简洁，更因为它给我的阅读体验比较好（比如能够迅速通过目录定位到内容，迅速直接地找到其他的标签内容等等），总体上来说提高了阅读效率。 应用主题 下载主题 1git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho 下在完后，会看到你的博客目录下bolg/themes有个miho的文件夹，这个文件夹就是你后面个性设置时经常操作的目录 应用主题在配置文件中修改：theme: miho在最后一行修改代码如下： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:merlin153/merlin153.github.io.git branch: master 三个参数的冒号后面都必须有个空格，‘repo’参数的后面填写自己前面建立的github仓库名。执行常用操作hexo clean–&gt;hexo g–&gt;hexo d ,然后再浏览器界面输入本地地址可以看到模板主题，即应用主题成功。 应用主题图片： 个性修改1.修改logo和背景图片2.修改右上角菜单主题配置文件中采用YAML语言配置信息，所以修改时注意YAML语言格式，每个配置项后面都有个空格3.修改社交栏 4.daovoice的增添首先在官网注册账号，邀请码填写“数值”，即可创建完成，这时会看到给你的app_id和user_id，然后在themes/hexo-theme-miho/layout/layout.ejs文件中追加如下js代码： 1234567891011121314151617181920212223242526272829&lt;% if (theme.daovoice) &#123; %&gt; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123; i[\"DaoVoiceObject\"]=r; i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date(); a=s.createElement(o),m=s.getElementsByTagName(o)[0]; a.async=1;a.src=g;a.charset=\"utf-8\"; m.parentNode.insertBefore(a,m)&#125; )(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/\" + \"&lt;%- theme.daovoice.app_id %&gt;\" + \".js\",\"daovoice\") &lt;/script&gt; &lt;script&gt; daovoice('init', &#123; app_id: \"&lt;%- theme.daovoice.app_id %&gt;\", user_id: \"&lt;%- theme.daovoice.user_id %&gt;\", email: \"&lt;%- theme.daovoice.email %&gt;\", name: \"&lt;%- theme.daovoice.name %&gt;\", signed_up: &lt;%- theme.daovoice.signed_up %&gt; &#125;); daovoice('update'); &lt;/script&gt; &lt;script&gt; daovoice('init', &#123; app_id: \"&lt;%- theme.daovoice_app_id %&gt;\" &#125;); daovoice('update'); &lt;/script&gt;&lt;% &#125; %&gt; 最后修改miho的主题文件，追加如下代码，两个id填写刚才你在daovoice看到的值： 12345678# 在线联系 | DaoVoicedaovoice: enable: true app_id: #必填 user_id: # 必填: 该用户在您系统上的唯一ID email: # 选填: 该用户在您系统上的主邮箱 name: # 选填: 用户名 signed_up: 1449821660 # 选填: 用户的注册时间，用Unix时间戳表示 5.增加评论功能比较评论系统插件，来必力/livere、gitment、畅言、Valine都各具优势，【图片】，来必力和畅言都差不多，这里选畅言做评论插件吧。 先去畅言官网注册账号具体过程可参考畅言注册 然后进入 themes/miho/_config.yml 填写自己的appid和appkey，appid和appkey可以在畅言控制台的最下面看到。 至此，一个博客的模板就基本完成了，剩下的就是写博文了。博文书写工具推荐使用markdown。 常用操作 常用： hexo clean: hexo g :生成静态文件，会在当前目录下生成一个新的叫做public的文件夹(也可使用hexo generate) hexo s :启动本地服务，可以在http://localhost:4000/ 查看（也可使用hexo server） hexo d:部署到github远端 hexo new “pageName” #新建文章 hexo new page “pageName” #新建页面 组合操作hexo d -g #生成部署hexo s -g #生成预览","categories":[{"name":"博客","slug":"博客","permalink":"http://merlin153.com/categories/博客/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://merlin153.com/tags/博客/"},{"name":"hexo主题","slug":"hexo主题","permalink":"http://merlin153.com/tags/hexo主题/"}],"author":"merlin"},{"title":"神奇的vi编辑器","slug":"数据库发展","date":"2019-03-25T15:25:46.000Z","updated":"2019-03-26T09:19:51.539Z","comments":true,"path":"2019/03/25/数据库发展/","link":"","permalink":"http://merlin153.com/2019/03/25/数据库发展/","excerpt":"","text":"所有的Linux发行版系统上都会默认内置vi编辑器，而不一定带有其他文本编辑器，非常通用；其次，很多软件的编辑接口都会默认调用vi；再者就是对很多热爱编程的大佬来说，可大大提高编程效率，很多黑客也是使用这个编辑器来减少自己摸鼠标时间的。 VI命令的工作模式更详细的文档请参考：http://c.biancheng.net/view/519.html 或 http://www.runoob.com/linux/linux-vim.html简化图： vi编辑器有三种工作模式：命令模式、插入模式、末行模式。 命令模式：此时从键盘上输入的任何字符都被当做编辑命令来解释，同时该模式是进入 vi 编辑器后的默认模式。任何时候，不管用户处于何种模式，按下Esc键即可进入命令模式。 插入模式（亦称编辑模式）：在命令模式下输入插入命令i、附加命令a、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被 vi 当做文件内容保存起来，并将其显示在屏幕上。 末行模式（亦称ex 转义模式）：在命令模式下，用户按 : 键即可进入末行模式下，此时 vi 会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个:作为末行模式的说明符，等待用户输入命令。多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。vi 编辑器的 3 种模式的转换如下图所示： VI命令的基本操作一下文本内容的“#”为注释内容，说明功能 进入文件1vi test.py # 打开名为test.py的文件，若不存在则创建并打开该文件 如果只输入 vi，而不带文件名，也可以进入 vi。这时编辑的文件是没有文件名的，所以在退出 vi 时，需要在退出命令后输入文件名，这样才能保证该文件被保存在磁盘中。 修改文件插入文本（i和I） i:将文本插入到光标所在位置前I:I 命令将文本插入当前行的行首 追加文本（a和A） a:将新文本追加到光标当前所在位置之后A:命令将新文本追加到所在行的行尾 空行插入命令(o和O) o：命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首O：命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。 移动光标字符移动 移动命令 意义 h 左移一个光标 j 下移一个光标 k 上移一个光标 l 右移一个光标 按字移动 w 和 W 命令将光标右移至下一个字的字首。区别：-w 所指的字是指英文单词、标点符号和非字母字符；-W 所指的字是指两个空格之间的任何内容； 如果光标起始位置处于字内，则 e 和 E 命令将把光标移到本字字尾；如果光标起始位置处于字尾，则 e 和 E 命令将把光标移动到下一个字的字尾。区别：-e 所指的字是指英文单词、标点符号和非字母字符；-E 所指的字是指两个空格之间的任何内容； 如果光标处于所在字内，则 b 和 B 命令将把光标移至本字字首；如果光标处于所在字字首，则 b 和 B 命令将把光标移到上一个字的字首。区别：-b 命令所指的字是指英文单词、标点符号和非字母字符；-B 命令所指的字是指两个空格之间的任何内容。 按行移动 H：将光标移至当前屏幕的第 1 行，而不是整个文件的第 1 行。若在 H 命令之前加 上数字 n，则将光标移至第 n 行的行首 M：将光标移至屏幕显示文件的中间行的行首。即如果当前屏幕已经充满，则移动到整个屏幕的中间行；否则，移动到显示文本的那些行的中间行。 L：将光标移至屏幕显示文件的最底行的行首。即如果文件内容需要超过一个屏幕显示时，该命令将光标移至屏幕上最底行的行首；否则该命令将光标移至文件最后一行的行首。 G：在全文的范围内移动光标，此时的光标移动范围不再受屏幕的限制。例如，在上例中，在命令模式下输入命令 5G 之后光标将移到第 5 行的行首。 按段落移动光标一个段落被定义为是以一个空白行开始和结束的片段。按段落移动光标的命令有以下两种: {：该命令将光标向前移至上一个段落的开头。 }：该命令将光标向后移至下一个段落的开头。 文本移动文本行移动 >:将指定的正文行向右移动。 >n：n表示光标所在位置后面的文本行数。也可以不写 n，此时默认为 1。&lt;:命令将指定的正文行向左移动。其使用方式与命令相同，但是方向相反。 >&gt;:该命令将光标所在行右移 8 个空格。如果在&gt;&gt;命令之前给出一个数字 n，例如 4，则表示光标当前行及其下面的 3 行（共4行）都右移 8 个空格。 &lt;&lt;:命令将光标所在行左移 8 个空格。其使用与&gt;&gt;命令相同，但是移动方向相反。 文本跨行移动(m命令) imj:表示把第 i 行移至第 j 行的下方。下面实例演示了 m 命令的使用。例：6m2,就是将第6行的内容移动到第2行的下方 替换字符替换 r: 将当前光标所指的字符替换为提供的字符。可以在该命令之前加上数字 n，表示将从当前字符开始的 n 个字符替换为提供的字符。下面实例演示了 r 命令的使用。 R:该命令会让 vi 进入 replace 模式。在此模式下，每个输入的字符都会替换当前光标下的字符，直到输入 \\ 结束该模式。 字符串替换 [range]s/s1/s2/ [option] [range] 表示检索范围，省略时表示当前行；1,10表示从第 1 行到 10 行；%表示整个文件，同1, $；. ,$从当前行到文件尾。 s 为替换命令。 s1 要被替换的串，s2 为替换的串。 option 表示选项：/g表示在全局文件中进行替换;/c表示在每次替换之前需要用户进行确认;省略时仅对每行第一个匹配串进行替换。例如：%s/\\&lt;abc/cde 表示将以 abc 开头的单词替换为以 cde 开头。 辅助操作字符串检索 /String:从光标处开始向后寻找字符串 string。 ?String:从光标处开始向前寻找字符串 string。 文本复制和粘贴 v 命令：在命令模式下进行文本选择。在需要选择的文本的起始处按下 v 键进入块选择模式，然后移动光标到块尾处。这之间的部分被高亮显示，表示被选中. V 命令：在命令模式下按行进行文本选择。在需要选择的文本的第一行按下 V 键，然后移动光标到块的最后一行。这之间的所有行被高亮显示，表示被选中。 yy ：复制光标所在的整行。在 yy 前可加一个数字 n，表示复制当前行及其后 n-1 行的内容。 Y 或 y$ ：两命令功能一样，都是复制从光标所在处开始到行尾的内容。 yw ：复制一个单词。若光标处在某个词的中间，则从光标所在位置开始复制至词尾。同 yy 命令一样，可在 yw 之前加一个数字 n，表示复制 n 个指定的单词。 y) ：复制到下一句幵始的所有字符。 y} ：复制到下一段开始的所有字符。 y\\ （\\ 表示回车）：复制包括当前行在内的两行内容。 p 命令：粘贴命令，粘贴当前缓冲区中的内容 文本删除 删除单个字符 x 命令：删除光标处的字符。若在 x 之前加上一个数字 n，则删除从光标所在位置开始向右的 n 个字符 X 命令：删除光标前面的字符。若在 X 之前加上一个数字 n，则删除从光标前面那个字符开始向左的 n 个字符。 删除多个字符 dd 命令：该命令删除光标所在的整行。在 dd 前可加上一个数字 n，表示删除当前行及其后 n-1 行的内容。 D 命令或 d$ 命令：两个命令功能一样，都是删除从光标所在处开始到行尾的内容。 d0 命令：该命令删除从光标前一个字符开始到行首的内容。 dw 命令：该命令删除一个单词。若光标处在某个词的中间，则从光标所在位置开始删至词尾。同 dd 命令一样，可在 dw 之前加一个数字n，表示删除 n 个指定的单词。 d( 命令：该命令删除到上一句开始的所有字符。 d) 命令：该命令删除到下一句开始的所有字符。 d} 命令：该命令删除到上一段开始的所有字符。 d{ 命令：该命令删除到下一段开始的所有字符。 d\\ 命令：该命令（\\表示回车）删除包括当前行在内的两行字符。 操作撤销 u ：该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。 U ：该命令会一次性撤销自上次移动到当前行以来做过的所有操作，再使用一次 U 命令则撤销之前的 U 命令所做的操作，恢复被撤销的内容。 退出文件 :wq vi将先保存文件，然后退出 vi 返回到 shell。如果当前文件尚未取名，则需要现指定一个文件名。 :x 在末行模式下，若当前编辑文件曾被修改过，则 vi 会保存该文件。否则 vi 直接退出，不保存该文件。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://merlin153.com/tags/Linux/"},{"name":"vi编辑器","slug":"vi编辑器","permalink":"http://merlin153.com/tags/vi编辑器/"}],"author":"墨林"}]}