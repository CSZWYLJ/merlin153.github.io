{"meta":{"title":"Merlin's Blog","subtitle":null,"description":"一个热爱 AI 的技术博客","author":"merlin","url":"http://merlin153.com","root":"/"},"pages":[],"posts":[{"title":"博客搭建记录","slug":"博客搭建记录","date":"2019-03-26T17:04:05.000Z","updated":"2019-03-26T11:43:23.970Z","comments":true,"path":"2019/03/27/博客搭建记录/","link":"","permalink":"http://merlin153.com/2019/03/27/博客搭建记录/","excerpt":"","text":"此文是对基于windows的博客搭建流程的描述,采用的是hexo+GithubPages+域名的实现方案。 原理属性介绍 GithubPages是Github提供的一种空间托管服务，但是只能托管静态文件，对于写博客足以，静态文件支持html、css这些常见的网页件，Markdown文件、Jekyll文件，并不支持PHP这种动态脚本. 补充：GitHubPages为了提供对HTML内容的支持，选择了Jekyll作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看Jekyll官方文档Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过layout将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。jekyll的大致目录如下： 使用hexo做静态博客有个比较麻烦的地方是，hexo本身的博客源码是基于node.js的，直接将源码放在github上是不能解析的，必须用命令 hexo generate(也可以简写：hexo g) 生成public文件，public文件里面是html、css文件，然后将其部署到github的username.github.io项目的master分支下，同时在source目录下添加CNAME文件（CNAME里面记录自定义的域名），这样hexo会把CNAME文件放到网站根目录下。 大致原理这里简单地解析下GithubPages的基本原理，以我的域名merlin153.com为例，这是我在Chrome浏览器里输入merlin153.com的时候，通过F12观察到的请求头header，注意在header里面有一个字段host，Github服务器正是通过host来判断应该向浏览器返回一个什么样的html页面。当然前提是我得把merlin.com这个域名的A记录指向github提供的服务器地址。github知道请求是要获取merlin153.com的首页，但是应该去哪个repository里面找呢？github服务器肯定有数据库存储了merlin153.com和repository的对应关系，这个对应关系肯定是添加CNAME文件的时候建立的,也就是通过CNAME触发这种关系。 搭建环境git的配置 小白安装极力推荐:windows下Git图形安装 第三方网站参考Runoob，我觉得这上面讲的也很细，关键有些小窍门，可以在这个网站对Git做更深入的了解。 查看官网安装Git官网安装Git安装完成后可以检查下是否安装成功： 通过右键直接查看，如果存在“git bash here”操作键则证明安装成功。 通过在DOS窗口的“git –version”指令查询Git版本nodejs的配置 小白安装请参考windows下nodejs图形安装 nodejs的安装可查看Runoob安装完成后一定要配置其全局变量，然后就可以通过查询其版本(node -v)以检查是否安装成功了。 域名 如果不想花钱购买域名也可以实现创建自己的网站，即采用“hexo+GithubPages”方式，用“username.github.io”的方式登录。但如果用自己喜欢的域名来登录，那将再好不过。购买域名的网站有很多，比较能够信任的有godaddy、namesilo、万网、aliyun、腾讯云等等，看自己意愿了。很多的国外域名购买时都会优惠一点，比我在namesilo购买域名时就优惠了1美元，在这里给大家分享个可以获得优惠码的网址：https://xianhuo.org/ 接下来就是解析域名了，解析就是域名到IP地址的转换过程。 在域名注册商那里注册了域名之后如何才能看到自己的网站内容呢，这就需要用一个专业术语叫“域名解析”的服务来为我们工作。 域名是为了方便记忆而专门建立的一套地址转换系统，要访问一台互联网上的服务器，最终还必须通过IP地址来实现，域名解析就是将域名重新转换为IP地址的过程。一个域名对应一个IP地址，一个IP地址可以对应多个域名；所以多个域名可以同时被解析到一个IP地址。域名解析需要由专门的域名解析服务器(DNS)来完成。 解析过程。比如，一个域名为：aaa.com，如果要访问该网站，就要进行解析，首先在域名注册商如阳光互联等那里通过专门的DNS服务器解析到一个WEB服务器的一个固定IP上：211.214.1.XXX，然后，通过WEB服务器来接收这个域名，把aaa.com这个域名映射到这台服务器上。那么，输入aaa.com这个域名就可以实现访问网站内容了.即实现了域名解析的全过程. 人们习惯记忆域名，但机器间互相只认IP地址，域名与IP地址之间是对应的，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，整个过程是自动进行的。 域名解析协议（DNS）用来把便于人们记忆的主机域名和电子邮件地址映射为计算机易于识别的IP地址。DNS是一种c/s的结构，客户机就是用户用于查找一个名字对应的地址，而服务器通常用于为别人提供查询服务 如何实现在注册商那里管理域名，需要添加两条记录，即：A记录和CNAME记录。同时你的博客站点目录的source文件夹下必须创建创建一个名字CNAME的文件，里面只需要记录你的域名。 A记录(IP指向)：用来指定域名对应的IP地址记录。用户可以将该域名解析到自己的WEB SERVER上。同时也可以设置您域名的二级域名。 CNAME（别名指向）:用域名来代替IP地址。 图形操作可参考此作者 配置hexoHexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 在磁盘中新建一个文件夹blog，进入blog，右键‘git bash here’，执行命令安装hexo：npm install -g hexo 初始化hexohexo init 安装npm和hexonpm install 启动本地浏览hexo s即可看到本地预览界面，也就是hexo的默认主题界面，后面我们进行替换主题操作。 常用命令hexo clean –&gt;hexo generate –&gt;hexo deploy 使用个性主题&lt;= 待修改… =&gt;这里我推荐一些比较受宠的主题，有yilia，next，jekll等等，这些主题可以到hexo【主题】栏里搜索到，大家也可以在hexo主题里看到很多其他的主题,如果喜欢的话可以点进相关主题，然后进入他们的github进行clone即可。这里，我比较喜欢基于next主题的响应式主题–miho，因为简洁，更因为它给我的阅读体验比较好（比如能够迅速通过目录定位到内容，迅速直接地找到其他的标签内容等等），总体上来说提高了阅读效率。 应用主题 下载主题 1git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho 下在完后，会看到你的博客目录下bolg/themes有个miho的文件夹，这个文件夹就是你后面个性设置时经常操作的目录 应用主题在配置文件中修改：theme: miho在最后一行修改代码如下： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:merlin153/merlin153.github.io.git branch: master 三个参数的冒号后面都必须有个空格，‘repo’参数的后面填写自己前面建立的github仓库名。执行常用操作hexo clean–&gt;hexo g–&gt;hexo d ,然后再浏览器界面输入本地地址可以看到模板主题，即应用主题成功。 应用主题图片： 个性修改1.修改logo和背景图片2.修改右上角菜单主题配置文件中采用YAML语言配置信息，所以修改时注意YAML语言格式，每个配置项后面都有个空格3.修改社交栏 4.daovoice的增添首先在官网注册账号，邀请码填写“数值”，即可创建完成，这时会看到给你的app_id和user_id，然后在themes/hexo-theme-miho/layout/layout.ejs文件中追加如下js代码： 1234567891011121314151617181920212223242526272829&lt;% if (theme.daovoice) &#123; %&gt; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123; i[\"DaoVoiceObject\"]=r; i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date(); a=s.createElement(o),m=s.getElementsByTagName(o)[0]; a.async=1;a.src=g;a.charset=\"utf-8\"; m.parentNode.insertBefore(a,m)&#125; )(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/\" + \"&lt;%- theme.daovoice.app_id %&gt;\" + \".js\",\"daovoice\") &lt;/script&gt; &lt;script&gt; daovoice('init', &#123; app_id: \"&lt;%- theme.daovoice.app_id %&gt;\", user_id: \"&lt;%- theme.daovoice.user_id %&gt;\", email: \"&lt;%- theme.daovoice.email %&gt;\", name: \"&lt;%- theme.daovoice.name %&gt;\", signed_up: &lt;%- theme.daovoice.signed_up %&gt; &#125;); daovoice('update'); &lt;/script&gt; &lt;script&gt; daovoice('init', &#123; app_id: \"&lt;%- theme.daovoice_app_id %&gt;\" &#125;); daovoice('update'); &lt;/script&gt;&lt;% &#125; %&gt; 最后修改miho的主题文件，追加如下代码，两个id填写刚才你在daovoice看到的值： 12345678# 在线联系 | DaoVoicedaovoice: enable: true app_id: #必填 user_id: # 必填: 该用户在您系统上的唯一ID email: # 选填: 该用户在您系统上的主邮箱 name: # 选填: 用户名 signed_up: 1449821660 # 选填: 用户的注册时间，用Unix时间戳表示 5.增加评论功能比较评论系统插件，来必力/livere、gitment、畅言、Valine都各具优势，【图片】，来必力和畅言都差不多，这里选畅言做评论插件吧。 先去畅言官网注册账号具体过程可参考畅言注册 然后进入 themes/miho/_config.yml 填写自己的appid和appkey，appid和appkey可以在畅言控制台的最下面看到。 至此，一个博客的模板就基本完成了，剩下的就是写博文了。博文书写工具推荐使用markdown。 常用操作 常用： hexo clean: hexo g :生成静态文件，会在当前目录下生成一个新的叫做public的文件夹(也可使用hexo generate) hexo s :启动本地服务，可以在http://localhost:4000/ 查看（也可使用hexo server） hexo d:部署到github远端 hexo new “pageName” #新建文章 hexo new page “pageName” #新建页面 组合操作hexo d -g #生成部署hexo s -g #生成预览","categories":[],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"http://merlin153.com/tags/hexo主题/"},{"name":"博客","slug":"博客","permalink":"http://merlin153.com/tags/博客/"}],"author":"merlin"},{"title":"神奇的vi编辑器","slug":"数据库发展","date":"2019-03-25T15:25:46.000Z","updated":"2019-03-26T09:19:51.539Z","comments":true,"path":"2019/03/25/数据库发展/","link":"","permalink":"http://merlin153.com/2019/03/25/数据库发展/","excerpt":"","text":"所有的Linux发行版系统上都会默认内置vi编辑器，而不一定带有其他文本编辑器，非常通用；其次，很多软件的编辑接口都会默认调用vi；再者就是对很多热爱编程的大佬来说，可大大提高编程效率，很多黑客也是使用这个编辑器来减少自己摸鼠标时间的。 VI命令的工作模式更详细的文档请参考：http://c.biancheng.net/view/519.html 或 http://www.runoob.com/linux/linux-vim.html简化图： vi编辑器有三种工作模式：命令模式、插入模式、末行模式。 命令模式：此时从键盘上输入的任何字符都被当做编辑命令来解释，同时该模式是进入 vi 编辑器后的默认模式。任何时候，不管用户处于何种模式，按下Esc键即可进入命令模式。 插入模式（亦称编辑模式）：在命令模式下输入插入命令i、附加命令a、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被 vi 当做文件内容保存起来，并将其显示在屏幕上。 末行模式（亦称ex 转义模式）：在命令模式下，用户按 : 键即可进入末行模式下，此时 vi 会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个:作为末行模式的说明符，等待用户输入命令。多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。vi 编辑器的 3 种模式的转换如下图所示： VI命令的基本操作一下文本内容的“#”为注释内容，说明功能 进入文件1vi test.py # 打开名为test.py的文件，若不存在则创建并打开该文件 如果只输入 vi，而不带文件名，也可以进入 vi。这时编辑的文件是没有文件名的，所以在退出 vi 时，需要在退出命令后输入文件名，这样才能保证该文件被保存在磁盘中。 修改文件插入文本（i和I） i:将文本插入到光标所在位置前I:I 命令将文本插入当前行的行首 追加文本（a和A） a:将新文本追加到光标当前所在位置之后A:命令将新文本追加到所在行的行尾 空行插入命令(o和O) o：命令将在光标所在行的下面插入一个空行，并将光标置于该行的行首O：命令在光标所在行的上面插入一个空行，并将光标置于该行的行首。 移动光标字符移动 移动命令 意义 h 左移一个光标 j 下移一个光标 k 上移一个光标 l 右移一个光标 按字移动 w 和 W 命令将光标右移至下一个字的字首。区别：-w 所指的字是指英文单词、标点符号和非字母字符；-W 所指的字是指两个空格之间的任何内容； 如果光标起始位置处于字内，则 e 和 E 命令将把光标移到本字字尾；如果光标起始位置处于字尾，则 e 和 E 命令将把光标移动到下一个字的字尾。区别：-e 所指的字是指英文单词、标点符号和非字母字符；-E 所指的字是指两个空格之间的任何内容； 如果光标处于所在字内，则 b 和 B 命令将把光标移至本字字首；如果光标处于所在字字首，则 b 和 B 命令将把光标移到上一个字的字首。区别：-b 命令所指的字是指英文单词、标点符号和非字母字符；-B 命令所指的字是指两个空格之间的任何内容。 按行移动 H：将光标移至当前屏幕的第 1 行，而不是整个文件的第 1 行。若在 H 命令之前加 上数字 n，则将光标移至第 n 行的行首 M：将光标移至屏幕显示文件的中间行的行首。即如果当前屏幕已经充满，则移动到整个屏幕的中间行；否则，移动到显示文本的那些行的中间行。 L：将光标移至屏幕显示文件的最底行的行首。即如果文件内容需要超过一个屏幕显示时，该命令将光标移至屏幕上最底行的行首；否则该命令将光标移至文件最后一行的行首。 G：在全文的范围内移动光标，此时的光标移动范围不再受屏幕的限制。例如，在上例中，在命令模式下输入命令 5G 之后光标将移到第 5 行的行首。 按段落移动光标一个段落被定义为是以一个空白行开始和结束的片段。按段落移动光标的命令有以下两种: {：该命令将光标向前移至上一个段落的开头。 }：该命令将光标向后移至下一个段落的开头。 文本移动文本行移动 >:将指定的正文行向右移动。 >n：n表示光标所在位置后面的文本行数。也可以不写 n，此时默认为 1。&lt;:命令将指定的正文行向左移动。其使用方式与命令相同，但是方向相反。 >&gt;:该命令将光标所在行右移 8 个空格。如果在&gt;&gt;命令之前给出一个数字 n，例如 4，则表示光标当前行及其下面的 3 行（共4行）都右移 8 个空格。 &lt;&lt;:命令将光标所在行左移 8 个空格。其使用与&gt;&gt;命令相同，但是移动方向相反。 文本跨行移动(m命令) imj:表示把第 i 行移至第 j 行的下方。下面实例演示了 m 命令的使用。例：6m2,就是将第6行的内容移动到第2行的下方 替换字符替换 r: 将当前光标所指的字符替换为提供的字符。可以在该命令之前加上数字 n，表示将从当前字符开始的 n 个字符替换为提供的字符。下面实例演示了 r 命令的使用。 R:该命令会让 vi 进入 replace 模式。在此模式下，每个输入的字符都会替换当前光标下的字符，直到输入 \\ 结束该模式。 字符串替换 [range]s/s1/s2/ [option] [range] 表示检索范围，省略时表示当前行；1,10表示从第 1 行到 10 行；%表示整个文件，同1, $；. ,$从当前行到文件尾。 s 为替换命令。 s1 要被替换的串，s2 为替换的串。 option 表示选项：/g表示在全局文件中进行替换;/c表示在每次替换之前需要用户进行确认;省略时仅对每行第一个匹配串进行替换。例如：%s/\\&lt;abc/cde 表示将以 abc 开头的单词替换为以 cde 开头。 辅助操作字符串检索 /String:从光标处开始向后寻找字符串 string。 ?String:从光标处开始向前寻找字符串 string。 文本复制和粘贴 v 命令：在命令模式下进行文本选择。在需要选择的文本的起始处按下 v 键进入块选择模式，然后移动光标到块尾处。这之间的部分被高亮显示，表示被选中. V 命令：在命令模式下按行进行文本选择。在需要选择的文本的第一行按下 V 键，然后移动光标到块的最后一行。这之间的所有行被高亮显示，表示被选中。 yy ：复制光标所在的整行。在 yy 前可加一个数字 n，表示复制当前行及其后 n-1 行的内容。 Y 或 y$ ：两命令功能一样，都是复制从光标所在处开始到行尾的内容。 yw ：复制一个单词。若光标处在某个词的中间，则从光标所在位置开始复制至词尾。同 yy 命令一样，可在 yw 之前加一个数字 n，表示复制 n 个指定的单词。 y) ：复制到下一句幵始的所有字符。 y} ：复制到下一段开始的所有字符。 y\\ （\\ 表示回车）：复制包括当前行在内的两行内容。 p 命令：粘贴命令，粘贴当前缓冲区中的内容 文本删除 删除单个字符 x 命令：删除光标处的字符。若在 x 之前加上一个数字 n，则删除从光标所在位置开始向右的 n 个字符 X 命令：删除光标前面的字符。若在 X 之前加上一个数字 n，则删除从光标前面那个字符开始向左的 n 个字符。 删除多个字符 dd 命令：该命令删除光标所在的整行。在 dd 前可加上一个数字 n，表示删除当前行及其后 n-1 行的内容。 D 命令或 d$ 命令：两个命令功能一样，都是删除从光标所在处开始到行尾的内容。 d0 命令：该命令删除从光标前一个字符开始到行首的内容。 dw 命令：该命令删除一个单词。若光标处在某个词的中间，则从光标所在位置开始删至词尾。同 dd 命令一样，可在 dw 之前加一个数字n，表示删除 n 个指定的单词。 d( 命令：该命令删除到上一句开始的所有字符。 d) 命令：该命令删除到下一句开始的所有字符。 d} 命令：该命令删除到上一段开始的所有字符。 d{ 命令：该命令删除到下一段开始的所有字符。 d\\ 命令：该命令（\\表示回车）删除包括当前行在内的两行字符。 操作撤销 u ：该命令撤销上一次所做的操作。多次使用 u 命令会一步一步依次撤销之前做过的操作（在一次切换到文本输入模式中输入的所有文本算一次操作）。 U ：该命令会一次性撤销自上次移动到当前行以来做过的所有操作，再使用一次 U 命令则撤销之前的 U 命令所做的操作，恢复被撤销的内容。 退出文件 :wq vi将先保存文件，然后退出 vi 返回到 shell。如果当前文件尚未取名，则需要现指定一个文件名。 :x 在末行模式下，若当前编辑文件曾被修改过，则 vi 会保存该文件。否则 vi 直接退出，不保存该文件。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://merlin153.com/tags/Linux/"},{"name":"vi编辑器","slug":"vi编辑器","permalink":"http://merlin153.com/tags/vi编辑器/"}],"author":"墨林"},{"title":"Hello World","slug":"hello-world","date":"2019-03-24T08:10:16.121Z","updated":"2019-03-24T08:10:16.121Z","comments":true,"path":"2019/03/24/hello-world/","link":"","permalink":"http://merlin153.com/2019/03/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}